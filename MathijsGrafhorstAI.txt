using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class MathijsGrafhorst : PlaneBase
{
    public List<Health> Enemies = new List<Health>();

    public enum FlyStates
    {
        idle = 0,
        search = 1,
        follow = 2,
        escape = 3,
    }
    public GameObject Test;

    public FlyStates currentstate;
	Vector3 target;
    Vector3 dir;
    public Vector3 luchtballon; // luchtballon
    public float radius; // radius for overlapshere to find enemy
    public float IdleAltitude; // altitude to stay on when no enemy is found

	public LayerMask mask;

    private const int DIRECTIONS_COUNT = 64;
    private const int MAX_DISTANCE = 130;

    float timer;
    float searchTimer;
    float option;
    bool optionchosen;
    float manTime = 60; //wait time between manoeuvre

	bool GotTarget;

    public RaycastHit GetDistanceToGround()
    {
        List<RaycastHit> hits = new List<RaycastHit>();

        foreach (Vector3 direction in GetSphereDirections(DIRECTIONS_COUNT))
        {
            Debug.DrawRay(transform.position, direction * MAX_DISTANCE, Color.blue);

            RaycastHit groundHitInfo;
			mask = ~mask;
			if (Physics.Raycast(transform.position, direction, out groundHitInfo, MAX_DISTANCE,mask))
            {
                hits.Add(groundHitInfo);
            }
        }
        if (hits != null && hits.Count > 1)
            return hits.OrderBy(v => v.distance).ToArray<RaycastHit>()[0];
        else
            return new RaycastHit();
    }

    private Vector3[] GetSphereDirections(int numDirections)
    {
        var pts = new Vector3[numDirections];
        var inc = Mathf.PI * (3 - Mathf.Sqrt(5));
        var off = 2f / numDirections;

        foreach (var k in Enumerable.Range(0, numDirections))
        {
            var y = k * off - 1 + (off / 2);
            var r = Mathf.Sqrt(1 - y * y);
            var phi = k * inc;
            var x = (float)(Mathf.Cos(phi) * r);
            var z = (float)(Mathf.Sin(phi) * r);
            pts[k] = new Vector3(x, y, z);
        }

        return pts;
    }



    public override void Start()
    {
        base.Start();
        target = startPos;
        throttle = 1;
    }
    public override void Update()
	{
		base.Update ();
		autolevel ();
		Evasion ();
		AltitudeSafety ();
		FormationFlight ();

        
        
		if (Altitude > 2)
        {
			yaw = Vector3.Dot (transform.right, dir) * 5; // left and right
			roll = Vector3.Dot (transform.right, dir) * 5;
		}

		switch (currentstate)
        {
		case FlyStates.idle:
			{
				dir = (target - transform.position).normalized;
                    searchTimer += Time.deltaTime;
                    
                    if (Enemies.Count < 1)
                    {
                        if (searchTimer > 2)
                        {
                            currentstate = FlyStates.search;
                        }
                           
                        
                    }
				return;
			}
		case FlyStates.follow:
			{
				if (target != null) 
				{
                     
					float travelTime = (200 + rigid.velocity.magnitude);

					Rigidbody enemy = Enemies [0].GetComponent<Rigidbody> ();

					Vector3 Pos = enemy.position;
					Vector3 Vel = enemy.velocity;

					float Dist = (transform.position - Pos).magnitude;
					dir = ((Pos + (Dist / travelTime) * Vel) - rigid.position).normalized; 
				}
				if (Enemies.Count > 0) 
				{
					target = Enemies [0].transform.position;
					if (Enemies [0].dead == true) 
					{
						SearchEnemy ();
					}
					Shoot ();
				} 
				else 
				{
					currentstate = FlyStates.idle;
				}
				return;
			}
		case FlyStates.search:
			{
				dir = (target - transform.position).normalized;
				SearchEnemy ();
				return;
			}
		case FlyStates.escape:
			{
				

				return;
			}
		}
	}


    void SearchEnemy()
    {
        Collider[] colliders = Physics.OverlapSphere(transform.position, radius, mask);
        Enemies.Clear();

		foreach (Collider coll in colliders) 
		{
			Health health = coll.GetComponent<Health> ();
			if (health != null && health.team != team && !health.dead) 
			{
				Enemies.Add (health);
			}
		}
        if (Enemies.Count > 0)
        {
            currentstate = FlyStates.follow;
			Enemies = Enemies.OrderBy(x => Vector3.Distance(this.transform.position,x.transform.position)).ToList();
        }
        else
        {
            if (searchTimer > 5)
            {
                searchTimer = 0;
            }
            target = startPos;
            currentstate = FlyStates.idle;
        }
    }
    void Shoot()
    {
        timer += 1 * Time.deltaTime;

        if (Vector3.Angle(target - transform.position, transform.forward) < 5)
            FireGuns();

        if (timer > manTime)
        {
            if (!optionchosen)
            {
                option = Random.Range(1, 4);
                optionchosen = true;
            }
            if (optionchosen == true)
            {
                Debug.Log("optionchosen");
                if (timer > manTime + 5)
                {
                    pitch = -PitchAngle * 2f;
                    Turbo();
                    if (option <= 1 && timer > manTime + 10) // go up
                    {
                        pitch = -1;
                        roll = 1;
                        if (PitchAngle > 0.5f && timer > manTime + 15)
                        {
                            timer = 0;
                            optionchosen = false;
                        }
                    }
                    else if (option > 1 && option <= 2 && timer > manTime + 10) //roll
                    {
                        roll = 1;
                        if (timer > manTime + 15)
                        {
                            timer = 0;
                            optionchosen = false;
                        }
                    }
                    else if (option > 2 && option <= 3 && timer > manTime + 10) //turn right and roll
                    {
                        yaw = 1; 
                        if (timer > manTime + 15)
                        {
                            timer = 0;
                            optionchosen = false;
                        }

                    }
                    else if (option > 3 && timer > manTime + 10) // roll and go up
                    {
                        pitch = -1;
                        roll = -1;
                        if (timer > manTime + 15)
                        {
                            timer = 0;
                            optionchosen = false;
                        }
                    }
                    if (timer > manTime + 50 || GetDistanceToGround().distance < 50)
                    {
                        timer = 0;
                        optionchosen = false;
                    }
                }
            }
        }



    }

    void AltitudeSafety()
    {
        if (GetDistanceToGround().transform != null)
        {
            roll = Vector3.Dot(transform.right, GetDistanceToGround().normal) * 3;
            pitch = -Vector3.Dot(transform.up, GetDistanceToGround().normal) * 3;
        }
        
    }
    void Evasion()
	{
		if (Enemies.Count == 1) {

			float distance = Vector3.Distance (Enemies [0].transform.position, transform.position);

			if (GetComponent<Health> ().hp < 50) {
				pitch = -1;
				roll = 1;
			}
			if (distance < 130) {
				pitch = -Enemies[0].GetComponent<PlaneBase>().pitch * 5;
				roll = -Enemies [0].GetComponent<PlaneBase> ().roll * 5;
				Turbo ();
			}
		}
			
		if (Enemies.Count > 1) {

			foreach (Health enemy in Enemies) {
				float distancePE = Vector3.Distance (enemy.transform.position, transform.position);

				
				if (GetComponent<Health> ().hp < 50) {
					pitch = -1;
					roll = 1;
				}
				if (distancePE < 130) {
					pitch = -enemy.GetComponent<PlaneBase>().pitch * 5;
					roll = -enemy.GetComponent<PlaneBase> ().roll * 5;
					Turbo ();
				}
            
			}
		}
    }
    void autolevel()
    {
       // autoPitchLevel = -PitchAngle * 2;
      //  autoRollLevel = -RollAngle * 2;
        
            roll = -RollAngle * 5;
            pitch = -Vector3.Dot(transform.up, dir) * 5; //up and down

    }
	void FormationFlight () 
	{
        //check if there is a plane to follow and if there is no enemy
        if (followPlane != null && !followPlane.GetComponent<Health>().dead)
        {
            if (Enemies.Count < 1)
            {
                Vector3 offset = (followPlane.transform.right - followPlane.transform.forward * 2) * 50;
                Vector3 t = followPlane.transform.position + offset;


                target = t;
                if (Vector3.Distance(followPlane.transform.position, transform.position) > 40)
                {
                    Turbo();
                }
            }
        }
	}


}
